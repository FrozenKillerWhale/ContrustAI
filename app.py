import streamlit as st
import os
from anthropic import Anthropic

# --- Global CSS Injection ---
st.markdown(
    """
    <style>
    /* General button styling for a consistent look */
    .stButton>button {
        background-color: #4CAF50; /* Green background */
        color: white; /* White text */
        font-size: 18px; /* Larger font */
        padding: 10px 24px; /* More padding */
        border-radius: 8px; /* Rounded corners */
        border: none; /* No default border */
        cursor: pointer; /* Pointer on hover */
        transition: background-color 0.3s ease; /* Smooth transition */
    }
    .stButton>button:hover {
        background-color: #45a049; /* Darker green on hover */
    }

    /* Text area styling for better readability */
    textarea {
        font-family: 'Arial', sans-serif; /* A common sans-serif font */
        font-size: 16px; /* Comfortable reading size */
        line-height: 1.6; /* Good line spacing */
    }

    /* Styling for Streamlit's info/warning boxes */
    .stAlert {
        border-radius: 8px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Session State Initialization (Check for user consent) ---
if 'agreed_to_terms' not in st.session_state:
    st.session_state.agreed_to_terms = False


# --- Agreement UI Function ---
def show_agreement_ui(placeholder): # placeholder Ïù∏ÏûêÎ•º Î∞õÎèÑÎ°ù Î≥ÄÍ≤Ω
    with placeholder.container(): # placeholder Ïª®ÌÖåÏù¥ÎÑà ÏïàÏóê UIÎ•º Í∑∏Î¶ΩÎãàÎã§.
        st.title("‚ú® ConTrust AI")
        st.header("Please Agree to Our Terms to Continue")

        with st.expander("Read Important Information Regarding Data Collection & Usage"):
            st.markdown("""
            Thank you for using **ConTrust AI**!

            To provide you with the best service and continuously improve our AI models, we utilize the text you input for analysis. Your input content helps us:
            * **Enhance the accuracy of our AI detection and originality checks.**
            * **Advance the development of our `Galad AI` sociopsychological profiling models.**

            **‚úÖ Important Information:**
            * **Only the text content you input for analysis is collected.** We do not collect any other personal information from you.
            * All collected text data is **fully anonymized**, meaning it cannot be linked back to you or any specific individual.
            * Anonymized data is used **solely for service improvement and AI model training purposes.**
            * For more details, please refer to our full policies below.
            """)

            st.markdown("""
            [Terms of Service](https://cloar.tech/terms_of_service) | [Privacy Policy](https://cloar.tech/privacy_policy)
            """)

        def agree_checkbox_callback():
            st.session_state.agreed_to_terms = True
            placeholder.empty() # ‚ú® Ï≤¥ÌÅ¨Î∞ïÏä§ ÎèôÏùò Ïãú placeholderÎ•º ÎπÑÏõÅÎãàÎã§.

        st.checkbox(
            "I have read and agree to the Terms of Service and Privacy Policy regarding data collection and usage.",
            key="agreement_checkbox_key",
            on_change=agree_checkbox_callback # Ï≤¥ÌÅ¨Î∞ïÏä§ Î≥ÄÍ≤Ω Ïãú ÏΩúÎ∞± Ìï®Ïàò Ìò∏Ï∂ú
        )


# --- Claude API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî ---
try:
    client = Anthropic(api_key=st.secrets["ANTHROPIC_API_KEY"])
except KeyError:
    st.error("Anthropic API ÌÇ§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. '.streamlit/secrets.toml' ÌååÏùºÏóê ANTHROPIC_API_KEYÎ•º ÏÑ§Ï†ïÌñàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
    client = None


# --- ÌÖçÏä§Ìä∏ Î∂ÑÏÑù Ìï®Ïàò (Claude API Ìò∏Ï∂ú) ---
def analyze_text_with_claude(text):
    if not client:
        return {"ai_score": 0.0, "originality_score": 0.0, "details": "API Client not initialized due to missing API key."}

    try:
        response = client.messages.create(
            model="claude-3-sonnet-20240229",
            max_tokens=500,
            messages=[
                {"role": "user", "content": f"""
                Please analyze the following text for its likelihood of being AI-generated and its overall originality.
                Provide your analysis in a structured JSON format with two scores (0.0 to 1.0):
                - 'ai_score': Probability that the text was generated by AI (0.0 for human, 1.0 for fully AI).
                - 'originality_score': How original the content appears (0.0 for highly plagiarized/unoriginal, 1.0 for highly original).
                Also, provide a brief 'reasoning' for each score.

                Text to analyze:
                {text}
                """}
            ]
        )

        response_content = response.content[0].text
        if "```json" in response_content:
            json_str = response_content.split("```json")[1].split("```")[0].strip()
        else:
            json_str = response_content.strip()

        import json
        analysis_result = json.loads(json_str)

        return {
            "ai_score": analysis_result.get("ai_score", 0.0),
            "originality_score": analysis_result.get("originality_score", 0.0),
            "details": analysis_result.get("reasoning", {})
        }

    except Exception as e:
        st.error(f"Error calling Claude API: {e}")
        return {"ai_score": 0.0, "originality_score": 0.0, "details": f"API call failed: {e}"}


# --- Main Application Logic Function ---
def main_app():
    st.title("‚ú® ConTrust AI: Content Authenticity & Originality Analysis")
    st.write("Enter your content below to check its authenticity and originality.")

    user_input_text = st.text_area("Paste your text here for analysis:", height=250, help="Max 5000 words for optimal performance.")

    if st.button("Analyze Content"):
        if user_input_text:
            if client is None:
                st.warning("Cannot perform analysis: Anthropic API client is not initialized. Please set up your API key.")
            else:
                with st.spinner("Analyzing your content with Claude AI..."):
                    analysis_results = analyze_text_with_claude(user_input_text)

                    ai_score = analysis_results["ai_score"]
                    originality_score = analysis_results["originality_score"]
                    details = analysis_results["details"]

                    st.subheader("Analysis Results:")

                    # AI Detection Result Display
                    if ai_score > 0.5:
                        st.error(f"**AI Generated Probability:** {ai_score*100:.1f}% ü§ñ")
                        if "ai_score" in details:
                            st.write(f"*{details['ai_score']}*")
                        elif isinstance(details, str):
                            st.write(f"*{details}*")
                        else:
                            st.write("This content shows characteristics commonly found in AI-generated text. Consider reviewing for human touch.")
                    else:
                        st.success(f"**AI Generated Probability:** {ai_score*100:.1f}% üßë‚Äçüíª")
                        if "ai_score" in details:
                            st.write(f"*{details['ai_score']}*")
                        elif isinstance(details, str):
                            st.write(f"*{details}*")
                        else:
                            st.write("This content appears to be human-generated or heavily edited by a human.")

                    # Originality Check Result Display
                    st.info(f"**Content Originality Score:** {originality_score*100:.1f}% ‚ú®")
                    if originality_score < 0.7:
                        if "originality_score" in details:
                            st.warning(f"*{details['originality_score']}*")
                        elif isinstance(details, str):
                            st.warning(f"*{details}*")
                        else:
                            st.warning("This content might contain similar phrases or ideas found in existing sources. Review for potential duplication.")
                    else:
                        if "originality_score" in details:
                            st.success(f"*{details['originality_score']}*")
                        elif isinstance(details, str):
                            st.success(f"*{details}*")
                        else:
                            st.success("Your content appears highly original!")

                    st.markdown("---")
                    st.write("üí° *Note: These are initial analysis results. For a more detailed breakdown, consider our advanced features.*")

        else:
            st.warning("Please paste some text into the box to start the analysis.")

    # --- Donation Link Section ---
    st.markdown("---")
    st.subheader("üí° Support ConTrust AI!")
    st.write("Your support helps us improve the service and advance our AI models.")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.link_button("Buy Me a Coffee! ‚òï", url="[https://coff.ee/cloar](https://coff.ee/cloar)")
    with col2:
        st.link_button("Contact Us üìß", url="mailto:contact@cloar.tech")
    with col3:
        st.link_button("Take Survey üìù", url="[https://forms.gle/bsPrVBZnwpWMizDU9](https://forms.gle/bsPrVBZnwpWMizDU9)")
    st.write("Thank you for your valuable contribution!")


# --- Main App Execution Flow Control ---
main_placeholder = st.empty()

if not st.session_state.agreed_to_terms:
    show_agreement_ui(main_placeholder)
else:
    main_placeholder.empty()
    main_app()